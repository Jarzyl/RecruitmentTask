import Head from 'next/head';
import { useForm } from 'react-hook-form';

const Form = () => {
  const { register, handleSubmit, watch, formState: { errors } } = useForm();

  const onSubmit = async (data: any) => {
    try {
      const response = await fetch('https://umzzcc503l.execute-api.us-west-2.amazonaws.com/dishes/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      // Przetwarzanie błędów walidacji jeśli się pojawią

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error('Something went wrong');

        // Poprawna odpowiedź

      } else {
        const responseData = await response.json();
        
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <>
        <Head>
            <title>Dishes</title>
            <meta name="description" content="Generated by create next app"/>
        </Head>

    <div className='mt-16 ml-5 mr-5 items-center text-center justify-center h-screen'>
      <h1 className='mb-6 text-lg xl:text-xl text-blue-600'>Place your order!</h1>
    <form onSubmit={handleSubmit(onSubmit)} className="max-w-md mx-auto p-4 bg-white rounded shadow-md">
      <div className="mb-4">
        <label htmlFor="name" className="block mb-2 font-medium text-blue-600">
          Dish Name
        </label>
        <input
          type="text"
          id="name"
          placeholder='For example: pepperoni...'
          {...register('name', { required: true })}
          className="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-300"
        />
        {errors.name && <span className='text-red-500'>This field is required</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="preparation_time" className="block mb-2 font-medium text-blue-600">
          Preparation Time (HH:MM:SS)
        </label>
        <input
          type="text"
          id="preparation_time"
          placeholder='For example: 00:30:00'
          {...register('preparation_time', { required: true, pattern: /[0-9]{2}:[0-9]{2}:[0-9]{2}/ })}
          className="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-300"
        />
        {errors.preparation_time && <span className='text-red-500'>Invalid format (HH:MM:SS)</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="type" className="block mb-2 font-medium text-blue-600">
          Dish Type
        </label>
        <select
          id="type"
          {...register('type', { required: true })}
          className="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-300">
          <option value="">Select Type</option>
          <option value="pizza">Pizza</option>
          <option value="soup">Soup</option>
          <option value="sandwich">Sandwich</option>
        </select>
        {errors.type && <span className='text-red-500'>You must fill in this field!</span>}
      </div>
      {watch('type') === 'pizza' && (
        <>
          <div className="mb-4">
            <label htmlFor="no_of_slices" className="block mb-2 font-medium text-blue-600">
              Number of Slices
            </label>
            <input
              type="number"
              id="no_of_slices"
              {...register('no_of_slices', { required: true })}
              className="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-300"
            />
            {errors.no_of_slices && <span className='text-red-500'>You must fill in this field!</span>}
          </div>
          <div className="mb-4">
            <label htmlFor="diameter" className="block mb-2 font-medium text-blue-600">
              Diameter
            </label>
            <input
              type="number"
              step="0.1"
              id="diameter"
              {...register('diameter', { required: true })}
              className="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-300"
            />
            {errors.diameter && <span className='text-red-500'>You must fill in this field!</span>}
          </div>
        </>
      )}
      {watch('type') === 'soup' && (
        <div className="mb-4">
          <label htmlFor="spiciness_scale" className="block mb-2 font-medium text-blue-600">
            Spiciness Scale (1-10)
          </label>
          <input
            type="number"
            id="spiciness_scale"
            {...register('spiciness_scale', { required: true, min: 1, max: 10 })}
            className="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-300"
          />
          {errors.spiciness_scale && <span className='text-red-500'>This field takes values in the range of 1-10</span>}
        </div>
      )}
      {watch('type') === 'sandwich' && (
        <div className="mb-4">
          <label htmlFor="slices_of_bread" className="block mb-2 font-medium text-blue-600">
            Number of Slices of Bread
          </label>
          <input
            type="number"
            id="slices_of_bread"
            {...register('slices_of_bread', { required: true })}
            className="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-300"
          />
          {errors.slices_of_bread && <span className='text-red-500'>You must fill in this field!</span>}
        </div>
      )}
      <button type="submit" className="w-32 py-2 px-4 mt-4 bg-blue-500 text-white rounded hover:bg-blue-600">
        Submit
      </button>
    </form>
    </div>
    </>
  );
};

export default Form;
